// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module InvMixColumns (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_address0,
        state_ce0,
        state_we0,
        state_d0,
        state_q0,
        state_address1,
        state_ce1,
        state_we1,
        state_d1,
        state_q1
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] state_address0;
output   state_ce0;
output   state_we0;
output  [7:0] state_d0;
input  [7:0] state_q0;
output  [3:0] state_address1;
output   state_ce1;
output   state_we1;
output  [7:0] state_d1;
input  [7:0] state_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] state_address0;
reg state_ce0;
reg state_we0;
reg[7:0] state_d0;
reg[3:0] state_address1;
reg state_ce1;
reg state_we1;
reg[7:0] state_d1;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] i_fu_96_p2;
reg   [2:0] i_reg_705;
wire    ap_CS_fsm_state2;
wire   [4:0] tmp_fu_102_p3;
reg   [4:0] tmp_reg_710;
wire   [0:0] icmp_ln352_fu_90_p2;
reg   [3:0] state_addr_reg_716;
reg   [3:0] state_addr_1_reg_721;
reg   [3:0] state_addr_2_reg_726;
wire    ap_CS_fsm_state3;
reg   [3:0] state_addr_3_reg_731;
reg   [7:0] a_reg_736;
reg   [7:0] b_reg_742;
wire   [7:0] xor_ln302_1_fu_180_p2;
reg   [7:0] xor_ln302_1_reg_748;
wire   [7:0] xor_ln302_2_fu_208_p2;
reg   [7:0] xor_ln302_2_reg_754;
wire   [7:0] xor_ln302_fu_236_p2;
reg   [7:0] xor_ln302_reg_760;
wire   [7:0] xor_ln302_4_fu_264_p2;
reg   [7:0] xor_ln302_4_reg_768;
wire   [7:0] xor_ln302_5_fu_292_p2;
reg   [7:0] xor_ln302_5_reg_774;
wire   [7:0] xor_ln302_3_fu_320_p2;
reg   [7:0] xor_ln302_3_reg_780;
wire   [7:0] xor_ln359_9_fu_542_p2;
reg   [7:0] xor_ln359_9_reg_788;
wire    ap_CS_fsm_state4;
wire   [7:0] xor_ln360_9_fu_597_p2;
reg   [7:0] xor_ln360_9_reg_793;
wire   [7:0] xor_ln361_9_fu_652_p2;
reg   [7:0] xor_ln361_9_reg_798;
wire   [7:0] xor_ln362_7_fu_696_p2;
reg   [7:0] xor_ln362_7_reg_803;
reg   [2:0] i_0_reg_79;
wire    ap_CS_fsm_state6;
wire   [63:0] zext_ln354_fu_110_p1;
wire   [63:0] tmp_1_fu_121_p3;
wire   [63:0] tmp_2_fu_135_p3;
wire   [63:0] tmp_3_fu_149_p3;
wire    ap_CS_fsm_state5;
wire   [4:0] or_ln355_fu_115_p2;
wire   [4:0] or_ln356_fu_130_p2;
wire   [4:0] or_ln357_fu_144_p2;
wire   [0:0] tmp_4_fu_164_p3;
wire   [7:0] select_ln302_fu_172_p3;
wire   [7:0] shl_ln302_fu_158_p2;
wire   [0:0] tmp_5_fu_192_p3;
wire   [7:0] select_ln302_1_fu_200_p3;
wire   [7:0] shl_ln302_1_fu_186_p2;
wire   [0:0] tmp_6_fu_220_p3;
wire   [7:0] select_ln302_2_fu_228_p3;
wire   [7:0] shl_ln302_2_fu_214_p2;
wire   [0:0] tmp_7_fu_248_p3;
wire   [7:0] select_ln302_3_fu_256_p3;
wire   [7:0] shl_ln302_3_fu_242_p2;
wire   [0:0] tmp_8_fu_276_p3;
wire   [7:0] select_ln302_4_fu_284_p3;
wire   [7:0] shl_ln302_4_fu_270_p2;
wire   [0:0] tmp_9_fu_304_p3;
wire   [7:0] select_ln302_5_fu_312_p3;
wire   [7:0] shl_ln302_5_fu_298_p2;
wire   [0:0] tmp_10_fu_332_p3;
wire   [7:0] select_ln302_6_fu_340_p3;
wire   [7:0] shl_ln302_6_fu_326_p2;
wire   [7:0] xor_ln302_7_fu_348_p2;
wire   [0:0] tmp_11_fu_360_p3;
wire   [7:0] select_ln302_7_fu_368_p3;
wire   [7:0] shl_ln302_7_fu_354_p2;
wire   [7:0] xor_ln302_8_fu_376_p2;
wire   [0:0] tmp_12_fu_388_p3;
wire   [7:0] select_ln302_8_fu_396_p3;
wire   [7:0] shl_ln302_8_fu_382_p2;
wire   [0:0] tmp_13_fu_416_p3;
wire   [7:0] select_ln302_9_fu_424_p3;
wire   [7:0] shl_ln302_9_fu_410_p2;
wire   [7:0] xor_ln302_10_fu_432_p2;
wire   [0:0] tmp_14_fu_444_p3;
wire   [7:0] select_ln302_10_fu_452_p3;
wire   [7:0] shl_ln302_10_fu_438_p2;
wire   [7:0] xor_ln302_11_fu_460_p2;
wire   [0:0] tmp_15_fu_472_p3;
wire   [7:0] select_ln302_11_fu_480_p3;
wire   [7:0] shl_ln302_11_fu_466_p2;
wire   [7:0] xor_ln359_1_fu_499_p2;
wire   [7:0] xor_ln359_2_fu_503_p2;
wire   [7:0] xor_ln359_fu_494_p2;
wire   [7:0] xor_ln359_4_fu_515_p2;
wire   [7:0] xor_ln302_6_fu_404_p2;
wire   [7:0] xor_ln302_9_fu_488_p2;
wire   [7:0] xor_ln359_6_fu_524_p2;
wire   [7:0] xor_ln359_7_fu_530_p2;
wire   [7:0] xor_ln359_5_fu_519_p2;
wire   [7:0] xor_ln359_8_fu_536_p2;
wire   [7:0] xor_ln359_3_fu_509_p2;
wire   [7:0] xor_ln360_1_fu_553_p2;
wire   [7:0] xor_ln360_2_fu_557_p2;
wire   [7:0] xor_ln360_fu_548_p2;
wire   [7:0] xor_ln360_4_fu_569_p2;
wire   [7:0] xor_ln360_6_fu_579_p2;
wire   [7:0] xor_ln360_7_fu_585_p2;
wire   [7:0] xor_ln360_5_fu_574_p2;
wire   [7:0] xor_ln360_8_fu_591_p2;
wire   [7:0] xor_ln360_3_fu_563_p2;
wire   [7:0] xor_ln361_fu_603_p2;
wire   [7:0] xor_ln361_2_fu_613_p2;
wire   [7:0] xor_ln361_3_fu_617_p2;
wire   [7:0] xor_ln361_1_fu_607_p2;
wire   [7:0] xor_ln361_6_fu_634_p2;
wire   [7:0] xor_ln361_7_fu_640_p2;
wire   [7:0] xor_ln361_5_fu_628_p2;
wire   [7:0] xor_ln361_8_fu_646_p2;
wire   [7:0] xor_ln361_4_fu_622_p2;
wire   [7:0] xor_ln362_1_fu_664_p2;
wire   [7:0] xor_ln362_2_fu_668_p2;
wire   [7:0] xor_ln362_fu_658_p2;
wire   [7:0] xor_ln362_5_fu_684_p2;
wire   [7:0] xor_ln362_4_fu_679_p2;
wire   [7:0] xor_ln362_6_fu_690_p2;
wire   [7:0] xor_ln362_3_fu_673_p2;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_0_reg_79 <= i_reg_705;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_79 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        a_reg_736 <= state_q0;
        b_reg_742 <= state_q1;
        state_addr_2_reg_726[3 : 2] <= tmp_2_fu_135_p3[3 : 2];
        state_addr_3_reg_731[3 : 2] <= tmp_3_fu_149_p3[3 : 2];
        xor_ln302_1_reg_748 <= xor_ln302_1_fu_180_p2;
        xor_ln302_2_reg_754 <= xor_ln302_2_fu_208_p2;
        xor_ln302_3_reg_780 <= xor_ln302_3_fu_320_p2;
        xor_ln302_4_reg_768 <= xor_ln302_4_fu_264_p2;
        xor_ln302_5_reg_774 <= xor_ln302_5_fu_292_p2;
        xor_ln302_reg_760 <= xor_ln302_fu_236_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_705 <= i_fu_96_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln352_fu_90_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        state_addr_1_reg_721[3 : 2] <= tmp_1_fu_121_p3[3 : 2];
        state_addr_reg_716[3 : 2] <= zext_ln354_fu_110_p1[3 : 2];
        tmp_reg_710[4 : 2] <= tmp_fu_102_p3[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        xor_ln359_9_reg_788 <= xor_ln359_9_fu_542_p2;
        xor_ln360_9_reg_793 <= xor_ln360_9_fu_597_p2;
        xor_ln361_9_reg_798 <= xor_ln361_9_fu_652_p2;
        xor_ln362_7_reg_803 <= xor_ln362_7_fu_696_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln352_fu_90_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln352_fu_90_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        state_address0 = state_addr_2_reg_726;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address0 = state_addr_reg_716;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_address0 = tmp_2_fu_135_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address0 = zext_ln354_fu_110_p1;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        state_address1 = state_addr_3_reg_731;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address1 = state_addr_1_reg_721;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_address1 = tmp_3_fu_149_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address1 = tmp_1_fu_121_p3;
    end else begin
        state_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6))) begin
        state_ce0 = 1'b1;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6))) begin
        state_ce1 = 1'b1;
    end else begin
        state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        state_d0 = xor_ln361_9_reg_798;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_d0 = xor_ln359_9_reg_788;
    end else begin
        state_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        state_d1 = xor_ln362_7_reg_803;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_d1 = xor_ln360_9_reg_793;
    end else begin
        state_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6))) begin
        state_we0 = 1'b1;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6))) begin
        state_we1 = 1'b1;
    end else begin
        state_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln352_fu_90_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign i_fu_96_p2 = (i_0_reg_79 + 3'd1);

assign icmp_ln352_fu_90_p2 = ((i_0_reg_79 == 3'd4) ? 1'b1 : 1'b0);

assign or_ln355_fu_115_p2 = (tmp_fu_102_p3 | 5'd1);

assign or_ln356_fu_130_p2 = (tmp_reg_710 | 5'd2);

assign or_ln357_fu_144_p2 = (tmp_reg_710 | 5'd3);

assign select_ln302_10_fu_452_p3 = ((tmp_14_fu_444_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign select_ln302_11_fu_480_p3 = ((tmp_15_fu_472_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign select_ln302_1_fu_200_p3 = ((tmp_5_fu_192_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign select_ln302_2_fu_228_p3 = ((tmp_6_fu_220_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign select_ln302_3_fu_256_p3 = ((tmp_7_fu_248_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign select_ln302_4_fu_284_p3 = ((tmp_8_fu_276_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign select_ln302_5_fu_312_p3 = ((tmp_9_fu_304_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign select_ln302_6_fu_340_p3 = ((tmp_10_fu_332_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign select_ln302_7_fu_368_p3 = ((tmp_11_fu_360_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign select_ln302_8_fu_396_p3 = ((tmp_12_fu_388_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign select_ln302_9_fu_424_p3 = ((tmp_13_fu_416_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign select_ln302_fu_172_p3 = ((tmp_4_fu_164_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign shl_ln302_10_fu_438_p2 = xor_ln302_10_fu_432_p2 << 8'd1;

assign shl_ln302_11_fu_466_p2 = xor_ln302_11_fu_460_p2 << 8'd1;

assign shl_ln302_1_fu_186_p2 = xor_ln302_1_fu_180_p2 << 8'd1;

assign shl_ln302_2_fu_214_p2 = xor_ln302_2_fu_208_p2 << 8'd1;

assign shl_ln302_3_fu_242_p2 = state_q1 << 8'd1;

assign shl_ln302_4_fu_270_p2 = xor_ln302_4_fu_264_p2 << 8'd1;

assign shl_ln302_5_fu_298_p2 = xor_ln302_5_fu_292_p2 << 8'd1;

assign shl_ln302_6_fu_326_p2 = state_q0 << 8'd1;

assign shl_ln302_7_fu_354_p2 = xor_ln302_7_fu_348_p2 << 8'd1;

assign shl_ln302_8_fu_382_p2 = xor_ln302_8_fu_376_p2 << 8'd1;

assign shl_ln302_9_fu_410_p2 = state_q1 << 8'd1;

assign shl_ln302_fu_158_p2 = state_q0 << 8'd1;

assign tmp_10_fu_332_p3 = state_q0[32'd7];

assign tmp_11_fu_360_p3 = xor_ln302_7_fu_348_p2[32'd7];

assign tmp_12_fu_388_p3 = xor_ln302_8_fu_376_p2[32'd7];

assign tmp_13_fu_416_p3 = state_q1[32'd7];

assign tmp_14_fu_444_p3 = xor_ln302_10_fu_432_p2[32'd7];

assign tmp_15_fu_472_p3 = xor_ln302_11_fu_460_p2[32'd7];

assign tmp_1_fu_121_p3 = {{59'd0}, {or_ln355_fu_115_p2}};

assign tmp_2_fu_135_p3 = {{59'd0}, {or_ln356_fu_130_p2}};

assign tmp_3_fu_149_p3 = {{59'd0}, {or_ln357_fu_144_p2}};

assign tmp_4_fu_164_p3 = state_q0[32'd7];

assign tmp_5_fu_192_p3 = xor_ln302_1_fu_180_p2[32'd7];

assign tmp_6_fu_220_p3 = xor_ln302_2_fu_208_p2[32'd7];

assign tmp_7_fu_248_p3 = state_q1[32'd7];

assign tmp_8_fu_276_p3 = xor_ln302_4_fu_264_p2[32'd7];

assign tmp_9_fu_304_p3 = xor_ln302_5_fu_292_p2[32'd7];

assign tmp_fu_102_p3 = {{i_0_reg_79}, {2'd0}};

assign xor_ln302_10_fu_432_p2 = (shl_ln302_9_fu_410_p2 ^ select_ln302_9_fu_424_p3);

assign xor_ln302_11_fu_460_p2 = (shl_ln302_10_fu_438_p2 ^ select_ln302_10_fu_452_p3);

assign xor_ln302_1_fu_180_p2 = (shl_ln302_fu_158_p2 ^ select_ln302_fu_172_p3);

assign xor_ln302_2_fu_208_p2 = (shl_ln302_1_fu_186_p2 ^ select_ln302_1_fu_200_p3);

assign xor_ln302_3_fu_320_p2 = (shl_ln302_5_fu_298_p2 ^ select_ln302_5_fu_312_p3);

assign xor_ln302_4_fu_264_p2 = (shl_ln302_3_fu_242_p2 ^ select_ln302_3_fu_256_p3);

assign xor_ln302_5_fu_292_p2 = (shl_ln302_4_fu_270_p2 ^ select_ln302_4_fu_284_p3);

assign xor_ln302_6_fu_404_p2 = (shl_ln302_8_fu_382_p2 ^ select_ln302_8_fu_396_p3);

assign xor_ln302_7_fu_348_p2 = (shl_ln302_6_fu_326_p2 ^ select_ln302_6_fu_340_p3);

assign xor_ln302_8_fu_376_p2 = (shl_ln302_7_fu_354_p2 ^ select_ln302_7_fu_368_p3);

assign xor_ln302_9_fu_488_p2 = (shl_ln302_11_fu_466_p2 ^ select_ln302_11_fu_480_p3);

assign xor_ln302_fu_236_p2 = (shl_ln302_2_fu_214_p2 ^ select_ln302_2_fu_228_p3);

assign xor_ln359_1_fu_499_p2 = (xor_ln302_2_reg_754 ^ xor_ln302_1_reg_748);

assign xor_ln359_2_fu_503_p2 = (xor_ln359_1_fu_499_p2 ^ state_q1);

assign xor_ln359_3_fu_509_p2 = (xor_ln359_fu_494_p2 ^ xor_ln359_2_fu_503_p2);

assign xor_ln359_4_fu_515_p2 = (xor_ln302_4_reg_768 ^ xor_ln302_3_reg_780);

assign xor_ln359_5_fu_519_p2 = (xor_ln359_4_fu_515_p2 ^ xor_ln302_reg_760);

assign xor_ln359_6_fu_524_p2 = (xor_ln302_9_fu_488_p2 ^ xor_ln302_6_fu_404_p2);

assign xor_ln359_7_fu_530_p2 = (xor_ln359_6_fu_524_p2 ^ xor_ln302_8_fu_376_p2);

assign xor_ln359_8_fu_536_p2 = (xor_ln359_7_fu_530_p2 ^ xor_ln359_5_fu_519_p2);

assign xor_ln359_9_fu_542_p2 = (xor_ln359_8_fu_536_p2 ^ xor_ln359_3_fu_509_p2);

assign xor_ln359_fu_494_p2 = (state_q0 ^ b_reg_742);

assign xor_ln360_1_fu_553_p2 = (xor_ln302_reg_760 ^ xor_ln302_4_reg_768);

assign xor_ln360_2_fu_557_p2 = (xor_ln360_1_fu_553_p2 ^ state_q1);

assign xor_ln360_3_fu_563_p2 = (xor_ln360_fu_548_p2 ^ xor_ln360_2_fu_557_p2);

assign xor_ln360_4_fu_569_p2 = (xor_ln302_7_fu_348_p2 ^ xor_ln302_3_reg_780);

assign xor_ln360_5_fu_574_p2 = (xor_ln360_4_fu_569_p2 ^ xor_ln302_5_reg_774);

assign xor_ln360_6_fu_579_p2 = (xor_ln302_9_fu_488_p2 ^ xor_ln302_11_fu_460_p2);

assign xor_ln360_7_fu_585_p2 = (xor_ln360_6_fu_579_p2 ^ xor_ln302_6_fu_404_p2);

assign xor_ln360_8_fu_591_p2 = (xor_ln360_7_fu_585_p2 ^ xor_ln360_5_fu_574_p2);

assign xor_ln360_9_fu_597_p2 = (xor_ln360_8_fu_591_p2 ^ xor_ln360_3_fu_563_p2);

assign xor_ln360_fu_548_p2 = (state_q0 ^ a_reg_736);

assign xor_ln361_1_fu_607_p2 = (xor_ln361_fu_603_p2 ^ state_q1);

assign xor_ln361_2_fu_613_p2 = (xor_ln302_reg_760 ^ xor_ln302_3_reg_780);

assign xor_ln361_3_fu_617_p2 = (xor_ln361_2_fu_613_p2 ^ xor_ln302_2_reg_754);

assign xor_ln361_4_fu_622_p2 = (xor_ln361_3_fu_617_p2 ^ xor_ln361_1_fu_607_p2);

assign xor_ln361_5_fu_628_p2 = (xor_ln302_8_fu_376_p2 ^ xor_ln302_7_fu_348_p2);

assign xor_ln361_6_fu_634_p2 = (xor_ln302_9_fu_488_p2 ^ xor_ln302_10_fu_432_p2);

assign xor_ln361_7_fu_640_p2 = (xor_ln361_6_fu_634_p2 ^ xor_ln302_6_fu_404_p2);

assign xor_ln361_8_fu_646_p2 = (xor_ln361_7_fu_640_p2 ^ xor_ln361_5_fu_628_p2);

assign xor_ln361_9_fu_652_p2 = (xor_ln361_8_fu_646_p2 ^ xor_ln361_4_fu_622_p2);

assign xor_ln361_fu_603_p2 = (b_reg_742 ^ a_reg_736);

assign xor_ln362_1_fu_664_p2 = (xor_ln302_reg_760 ^ xor_ln302_5_reg_774);

assign xor_ln362_2_fu_668_p2 = (xor_ln362_1_fu_664_p2 ^ xor_ln302_1_reg_748);

assign xor_ln362_3_fu_673_p2 = (xor_ln362_fu_658_p2 ^ xor_ln362_2_fu_668_p2);

assign xor_ln362_4_fu_679_p2 = (xor_ln302_6_fu_404_p2 ^ xor_ln302_3_reg_780);

assign xor_ln362_5_fu_684_p2 = (xor_ln360_6_fu_579_p2 ^ xor_ln302_10_fu_432_p2);

assign xor_ln362_6_fu_690_p2 = (xor_ln362_5_fu_684_p2 ^ xor_ln362_4_fu_679_p2);

assign xor_ln362_7_fu_696_p2 = (xor_ln362_6_fu_690_p2 ^ xor_ln362_3_fu_673_p2);

assign xor_ln362_fu_658_p2 = (xor_ln361_fu_603_p2 ^ state_q0);

assign zext_ln354_fu_110_p1 = tmp_fu_102_p3;

always @ (posedge ap_clk) begin
    tmp_reg_710[1:0] <= 2'b00;
    state_addr_reg_716[1:0] <= 2'b00;
    state_addr_1_reg_721[1:0] <= 2'b01;
    state_addr_2_reg_726[1:0] <= 2'b10;
    state_addr_3_reg_731[1:0] <= 2'b11;
end

endmodule //InvMixColumns
